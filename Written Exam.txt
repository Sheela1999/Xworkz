1Q)Constructor
    In java, constructor is a block of codes similer to the method. It is called when instance of the class is created.
At the time of calling constructor, memory of the object is allocated in the memmory.

* It is Special type of method, which is used to initializing an object(creating a onject).

* every time creating a object we use new() keyword, at least one constructor is alled here.

TWO RULES FOR CREATING CONSTRUCTOR

1) Constructor name must be same as its class name.
2) There is no return type in constructor.

* Constroctor cannot be a static, final, abstract, and synchronized.

* We can use access modifier while declaring a constructor. It controls from creating an object. like private, protected, public, default.

TWO TYPES OF CONSTRUCTOR

1) Default Constructor
2) Parameterized Constructor

1) DEFAULT CONSTRUCTOR
     Constructor called "default constructor" when it does not have any parameters.

* If there is no constructor available in class. In such case, java compiler povides default constructor by deafault.

* default constructor used provide default values to the object like 0 and Null.

2) PARAMETERIZED CONSTRUCTOR
      Constructor has a specific number of parameters is called parameterized Constructor. 
	  
* Parameterized Constructor is used provide different values to didtinct object. 

2Q)Features Of Java

* It is simple and easy to understand - Java is simple and we can easily understand.
* Robust - It is Strong in programming.
* Platform Indepedent - Here we can write once run anywhere so it is Platform Indepedent.
* MultiThreading - Here we are use so many processes in java.

3Q)Difference between C++ and Java

C++
* It is a programming language.
* It is a same like oops but not, in the oops we learn about concept but in C++ we learn about programming.
* It is depedent platform.

JAVA
* It is a simple and easy to understand.
* It is also onject oriented programming langauage.
* It is Platform Indepedent. 
* It is robust
* we use multithreading

4Q) Difference between JDK, JRE, and JVM

     JDK - It is a java development kit 
	       * It is having a JRE and JVM.
	 
	 JRE - Java RunTime Environment 
	 JVM - Java Virtual Machine - here we have libraries and files of the java.
	 
5Q) The types of the memory areas are allocated by JVM


6Q) METHODS
      In java, method is a block of codes, it run when its only called.
	  
here we wite method like using access modifier and return type with method name. and this method wiil be called in the main method.
	  
Here we have syntax of the main method

            public static void main(String[] args){
			     //
				 method body
				 //
			}
			
* Public is a Access Specifier - it gives permission to access. like Private, public, protected, default.

* void is Return Type
VOID is not going return anything.

 RETURN - here return is keyword, it stops the execution. and
* we can use datatype as return type.
 
 PARAMETERS- In witten method it declares a variables and in calling a method it passes the values. (passing the values is arguments)
 
7Q) METHOD OVERLOADING - 

     Method overloading is having a same Method Name but different parameters.
	 
THERE 3 WAYS IN METHOD OVERLOADING

1) use number of parameters
2) use different types datatypes in parameters
3) use Different type of order in parameters

EXAMPLE:

public class MethodOverloading{
       
	   public static void main(String[] args){
	   
	   call();
	   
	   }
	   
	   public static void call(){
	       System.out.println("calling to...");
	   }

       public static void call(String name, int Num){
	       System.out.println("print name with number");
	   }

       public static void call(int num, String name){
	       System.out.println("first print num and then name")
	   }	 

       public static void call(int num, String name, float percent){
	       System.out.println("first print num and then name")
	   }	 	  
} 

8Q) difference between constructor and method 

CONSTRUCTOR

* It is Special type of method, which is used to initializing an object(creating a onject).
* every time creating a object we use new() keyword, at least one constructor is alled here.
* Constructor name must be same as its class name.
* There is no return type in constructor.
* in this constructor overlaoding we can see. 
* it is a technique having more than one constructor with different parameter lists.

METHOD 

* In java, method is a block of codes, it run when its only called.
* here we are not creating any object. 
* In method, method has its own name.
* In Method, it will return datatype values.
* Here also we can see method overloading. 
* Method overloading is having a same Method Name but different parameters.

9Q) 
# STATIC VARIABLE - here using Static for property, and no need to create an object in the main method.
once we initialized not going to initialize again and again. bcoz it is one copy and statnderd one.

# STATIC MATHOD - when we are declaring method we can use static and some times we cannot use static.

#STATIC BLOCK - Initializing in the static variable and using constructor we intialize the non static variables.

10Q) CONSTRUCTOR OVERLOADING 
      In java, it is a technique having more than one constructor with different parameter lists. and we can give here same values also.

EXAMPLE:

public class ConstructorOverlaoding{

       String name = "sheela";
	   int number = 24271;
	   float percent = 89.76;
	   char alphabets = 'a';

    public ConstructorOverlaoding(){
	     System.out.println("default constructor");
	}
	 
	public ConstructorOverlaoding(String name, int number, float percent){
	   this.name=name;
	   this.number= number;
	   this.percent=percent;
	   
	   System.out.println(this.name);
	   System.out.println(this.number);
	   System.out.println(this.percent);
	}
	
public ConstructorOverlaoding(String name, int number, float percent, char alphabets){
	   this.name = name;
	   this.number = number;
	   this.percent = percent;
	   this.alphabets = alphabets;
	   
	   System.out.println(this.name);
	   System.out.println(this.number);
	   System.out.println(this.percent);
	   System.out.println(this.alphabets);
	
	}
	public static void main(String[] args){
        
            ConstructorOverlaoding obj = new ConstructorOverlaoding();		
	}
}  




 	 